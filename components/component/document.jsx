/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/sMJxULgMSgV
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Rubik } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import React, { useState, useEffect, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "../../components/ui/card"
import { Label } from "../../components/ui/label"
import { Input } from "../../components/ui/input"
import { Popover, PopoverTrigger, PopoverContent } from "../../components/ui/popover"
import { Button } from "../../components/ui/button"
import { Calendar } from "../../components/ui/calendar";
import { Toggle } from "../../components/ui/toggle"
import SellerAPI from "../../api/seller";
import BarcodeScanner from '../../components/component/BarcodeScanner';
import formatVND from "../../utils/formatVND";
import Loading from "../../components/component/loading-lottie"
import Animation from "../../utils/lottie-animations/astronot.json"
import { useStore } from "../../context/StoreContext"
import { useUser } from "../../context/UserContext"
import { showErrorAlert, showSuccessAlert } from '../../utils/reactSweetAlert';
export default function document() {
  const { storeId } = useStore();
  const { user } = useUser();
  const [loading, setLoading] =useState(true)
  const [documentDetails, setDocumentDetails] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const [totalAmount, setTotalAmount] = useState(0);
  const [paymentPercentage, setPaymentPercentage] = useState(0);
  const [products, setProducts] = useState([]);

  const docNumberOneRef = useRef(null);
  const docNumberTwoRef = useRef(null);
  const companyIdRef = useRef(null);
  const representOneRef = useRef(null);
  const representTwoRef = useRef(null);
  const paidAmountRef = useRef(null);
  const totalAmountRef = useRef(null);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await SellerAPI.product.getProductsOffline(storeId);
        if(response.statusCode === 200) {
          console.log("Product offline: " + JSON.stringify(response.data))
          setProducts(response.data);
        }
      } catch (error) {
        console.error("Error fetching products:", error);
      }finally{
        setLoading(false)
      }
    }

    if(storeId && user){
      fetchProducts();
    }

    
  },[storeId, user]);

  useEffect(() => {
    setTotalAmount(() => {
      return documentDetails.reduce((acc, item) => acc + item.total, 0);
    })
  },[documentDetails])

  const handleAddItem = () => {
    setDocumentDetails([...documentDetails, { barcode: '', productName: '', quantity: 0, price: 0, total: 0 }]);
  };

  const handleInputChange = (index, field, value) => {
    const newDetails = [...documentDetails];
    newDetails[index][field] = value;
    if (field === 'quantity' || field === 'price') {
      newDetails[index].total = newDetails[index].quantity * newDetails[index].price;
    }
    setDocumentDetails(newDetails);
  };

  const handlePaymentPercentage = (e) => {
      const paidAmount = parseFloat(e.target.value) || 0;
      const percentage = ((paidAmount / totalAmount) * 100).toFixed(2);
      setPaymentPercentage(percentage);
      console.log(percentage);
  }

  const handleDeleteItem = (index) => {
    const newDetails = documentDetails.filter((_, i) => i !== index);
    setDocumentDetails(newDetails);
  };

  const handleDateSelect = (date) => {
    setSelectedDate(date);
  };

  const getDocumentData = (e) => {
    const date = selectedDate;
    const docNumberOne = e.target.docNumberOne.value;
    const docNumberTwo = e.target.docNumberTwo.value;
    const companyId = e.target.companyId.value;
    const representOne = e.target.representOne.value;
    const representTwo = e.target.representTwo.value;
    const totalAmount = e.target.totalAmount.value;
    const paidAmount = e.target.paidAmount.value;
    const paymentPercentage = ((paidAmount / totalAmount) * 100).toFixed(2);;
    const paymentStatus = paymentPercentage === 100 || paymentPercentage > 100 ? true : false;
    const documentDetailsData = documentDetails.map(({ productName, ...rest }) => ({
      ...rest
    }))
    const docData = {
      storeId: storeId,
      docNumberOne      : docNumberOne,
      date              : date,
      docNumberTwo      : docNumberTwo,
      companyId         : companyId,
      representOne      : representOne,
      representTwo      : representTwo,
      totalAmount       : totalAmount,
      paidAmount        : paidAmount,
      paymentPercentage : paymentPercentage,
      paymentStatus     : paymentStatus,
      documentDetails   : documentDetailsData,
      createBy: user.id
    }

    return docData;
  }

  const createDocument = async (docData) => {
    setLoading(true);
    try {
      const response = await SellerAPI.document.createDocument(docData);
      if(response.statusCode){
        clearForm();
        showSuccessAlert("Nhập kho","Nhập kho thành công");
      }
    } catch (error) {
      console.error("Error creating document:", error);
      showErrorAlert("Nhập kho","Có lỗi xảy ra khi nhập kho!");
    }finally{
      setLoading(false)
    }
  }

  const clearForm = () => {
    setDocumentDetails([]);
    setSelectedDate(null);
    setTotalAmount(0);
    setPaymentPercentage(0);

    if (docNumberOneRef.current) docNumberOneRef.current.value = '';
    if (docNumberTwoRef.current) docNumberTwoRef.current.value = '';
    if (companyIdRef.current) companyIdRef.current.value = '';
    if (representOneRef.current) representOneRef.current.value = '';
    if (representTwoRef.current) representTwoRef.current.value = '';
    if (paidAmountRef.current) paidAmountRef.current.value = '';
    if (totalAmountRef.current) totalAmountRef.current.value = '';
  };

  const handleSubmit = (e) =>{
    e.preventDefault();

    for (let detail of documentDetails) {
      const foundProduct = products.find(product => product.barcode === detail.barcode);
      if (!foundProduct) {
        showErrorAlert("Nhập kho",`Sản phẩm ${detail.productName} với barcode ${detail.barcode} không tìm thấy! kiểm tra sản phẩm nhập vào!.`);
        return; 
      }
    }

    const docData = getDocumentData(e);

    createDocument(docData);

  }

  const handleInvalidBarcode = () =>{ 

  }

  const handleValidBarcode = async (barcode) => {
    try {
        // Check if the barcode is in the products list
        const exitsProduct = products.find(product => product.barcode === barcode);
        
        console.log("exitsProduct", exitsProduct);

        if (exitsProduct) {
            const prodId = exitsProduct.productId;
            const price = exitsProduct.price;
            const productName = exitsProduct.productName;
            const barcode = exitsProduct.barcode;
            setDocumentDetails((prev) => {
                // Check if product is already in documentDetails
                const existingDetail = prev.find(detail => detail.productId === prodId);

                if (existingDetail) {
                    // Increment quantity if product already exists in documentDetails
                    return prev.map(detail =>
                        detail.productId === prodId
                            ? { 
                                ...detail, 
                                quantity: detail.quantity + 1,
                                total: (detail.quantity + 1) * price 
                              }
                            : detail
                    );
                } else {
                    // Add new product to documentDetails if it doesn't exist
                    return [
                        ...prev,
                        {
                            productId: prodId,
                            productName: productName,
                            barcode: barcode,
                            quantity: 1,
                            price: price,
                            total: price
                        }
                    ];
                }
            });
        }
    } catch (error) {
        console.error('Product not found:', barcode);
    }
};


  const handleCancel = () => {
    clearForm();
  };

  if(loading){
    return <Loading animation={Animation} />;
  }

  return (
    (<Card className="w-full">
      <CardHeader>
        <CardTitle>Nhập Hàng Hóa</CardTitle>
      </CardHeader>
      <form onSubmit={handleSubmit}>
      <CardContent className="grid gap-6">
        <div className="grid md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="docNumberOne">Số Tài Liệu Một</Label>
            <Input id="docNumberOne" name="docNumberOne" placeholder="Nhập số tài liệu" ref={docNumberOneRef} required/>
          </div>
          <div className="space-y-2">
            <Label htmlFor="date">Ngày</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="w-full justify-start font-normal">
                  <div className="mr-2 h-4 w-4 opacity-50" />
                  {selectedDate ? selectedDate.toLocaleDateString() : 'Chọn ngày'}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar mode="single" onSelect={handleDateSelect}/>
              </PopoverContent>
            </Popover>
          </div>
        </div>
        <div className="grid md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="docNumberTwo">Số Tài Liệu Hai</Label>
            <Input id ="docNumberTwo" name="docNumberTwo" placeholder="Nhập số tài liệu" ref={docNumberTwoRef} required/>
          </div>
          <div className="space-y-2">
            <Label htmlFor="companyId">ID Công Ty</Label>
            <Input id="companyId" name="companyId" placeholder="Nhập ID công ty" ref={companyIdRef} required/>
          </div>
        </div>
        <div className="grid md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="representOne">Người Đại Diện Một</Label>
            <Input id="representOne" name="representOne" placeholder="Nhập tên người đại diện" ref={representOneRef} required/>
          </div>
          <div className="space-y-2">
            <Label htmlFor="representTwo">Người Đại Diện Hai</Label>
            <Input id="representTwo" name="representTwo" placeholder="Nhập tên người đại diện" ref={representTwoRef} required/>
          </div>
        </div>
        <div className="grid md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label htmlFor="totalAmount">Tổng Số Tiền</Label>
            <Input disabled id="totalAmount" name="totalAmount" type="number" placeholder="0.00" value={totalAmount} ref={totalAmountRef} readOnly/>
          </div>
          <div className="space-y-2">
            <Label htmlFor="paidAmount">Số Tiền Đã Thanh Toán</Label>
            <Input id="paidAmount" name="paidAmount" type="number" placeholder="0.00" onChange={handlePaymentPercentage} ref={paidAmountRef} required/>
          </div>
          <div className="space-y-2">
            <Label htmlFor="paymentPercentage">Tỷ Lệ Thanh Toán</Label>
            <Input disabled id="paymentPercentage" name="paymentPercentage" type="text" value={paymentPercentage + '%'} readOnly/>
          </div>
        </div>
        <Card>
            <CardHeader>
              <CardTitle>Chi Tiết Tài Liệu</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid gap-3">
                {documentDetails.map((detail, index) => (
                  <div key={index} className="grid md:grid-cols-7 gap-3 items-center">
                    <div className="space-y-2 ">
                      <Label htmlFor={`barcode-${index}`}>Mã Barcode</Label>
                      <Input
                        id={`barcode-${index}`}
                        placeholder="Mã Barcode"
                        value={detail.barcode}
                        onChange={(e) => handleInputChange(index, 'barcode', e.target.value)}
                        required
                      />
                    </div>
                    <div className="space-y-2 col-span-2">
                      <Label htmlFor={`product-name-${index}`}>Tên Sản Phẩm</Label>
                      <Input
                        id={`product-name-${index}`}
                        placeholder="Nhập tên sản phẩm"
                        value={detail.productName}
                        onChange={(e) => handleInputChange(index, 'productName', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2 ">
                      <Label htmlFor={`quantity-${index}`}>Số Lượng</Label>
                      <Input
                        id={`quantity-${index}`}
                        type="number"
                        placeholder="0"
                        value={detail.quantity}
                        onChange={(e) => handleInputChange(index, 'quantity', parseFloat(e.target.value))}
                        required
                      />
                    </div>
                    <div className="space-y-2 ">
                      <Label htmlFor={`price-${index}`}>Giá</Label>
                      <Input
                        id={`price-${index}`}
                        type="number"
                        placeholder="0.00"
                        value={detail.price}
                        onChange={(e) => handleInputChange(index, 'price', parseFloat(e.target.value))}
                        required
                      />
                    </div>
                    <div className="space-y-2 ">
                      <Label htmlFor={`total-${index}`}>Tổng</Label>
                      <Input
                        disabled
                        id={`total-${index}`}
                        type="number"
                        placeholder="0.00"
                        value={detail.price * detail.quantity}
                        readOnly
                      />
                    </div>
                    <div className="col-span-1 flex justify-center items-center mt-7 mr-20">
                      <Button variant="destructive" onClick={() => handleDeleteItem(index)}>
                        Xóa
                      </Button>
                    </div>
                  </div>
                ))}
                <Button variant="outline" className="w-full" onClick={handleAddItem}>
                  Thêm Mục
                </Button>
              </div> 
          </CardContent>


          </Card>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline" onClick={handleCancel}>Hủy</Button>
        <Button type="submit">Lưu</Button>
      </CardFooter>
      </form>
      <BarcodeScanner onInvalidBarcode={handleInvalidBarcode} onValidBarcode={handleValidBarcode}/>
    </Card>)
    
  );
}
