/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Vyt6JFKM0KV
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from "@/components/ui/accordion"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import Menu from "../component/menu"

export default function dashboardProduct() {
  const [filters, setFilters] = useState({
    category: [],
    origin: [],
    supplier: [],
  })
  const [sortBy, setSortBy] = useState("price-asc")
  const products = [
    {
      id: "ACME-DL-001",
      name: "Acme Desk Lamp",
      sku: "ACME-DL-001",
      price: 49.99,
      quantity: 120,
      barcode: "/placeholder.svg",
      category: "Lighting",
      origin: "China",
      supplier: "Acme Inc",
    },
    {
      id: "ACME-WH-002",
      name: "Acme Wireless Headphones",
      sku: "ACME-WH-002",
      price: 99.99,
      quantity: 75,
      barcode: "/placeholder.svg",
      category: "Electronics",
      origin: "Japan",
      supplier: "Acme Inc",
    },
    {
      id: "ACME-ST-003",
      name: "Acme Smart Thermostat",
      sku: "ACME-ST-003",
      price: 129.99,
      quantity: 50,
      barcode: "/placeholder.svg",
      category: "Home Automation",
      origin: "USA",
      supplier: "Acme Inc",
    },
    {
      id: "ACME-RV-004",
      name: "Acme Robotic Vacuum",
      sku: "ACME-RV-004",
      price: 199.99,
      quantity: 30,
      barcode: "/placeholder.svg",
      category: "Appliances",
      origin: "Germany",
      supplier: "Acme Inc",
    },
  ]
  const filteredProducts = useMemo(() => {
    let result = products
    if (filters.category.length > 0) {
      result = result.filter((product) => filters.category.includes(product.category))
    }
    if (filters.origin.length > 0) {
      result = result.filter((product) => filters.origin.includes(product.origin))
    }
    if (filters.supplier.length > 0) {
      result = result.filter((product) => filters.supplier.includes(product.supplier))
    }
    switch (sortBy) {
      case "price-asc":
        return result.sort((a, b) => a.price - b.price);
      case "price-desc":
        return result.sort((a, b) => b.price - a.price);
      default:
        return result
    }
  }, [filters, sortBy])
  const handleFilterChange = (type, value) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      [type]: prevFilters[type].includes(value)
        ? prevFilters[type].filter((item) => item !== value)
        : [...prevFilters[type], value],
    }))
  }
  const handleSortChange = (value) => {
    setSortBy(value)
  }
  return (
    (<div className="flex min-h-screen w-full flex-col bg-muted/40">
      <Menu/>
      
      <div className="flex flex-col sm:gap-4 sm:py-4 sm:pl-14">
        <header className="sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6" >
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold">Product Admin</h1>
          
        </div>
      </header>
        <main className="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
          <Tabs defaultValue="products" className="w-full">
            <TabsList className="flex items-center justify-between border-b">
              <TabsTrigger value="products">Products</TabsTrigger>
              <TabsTrigger value="reports">Reports</TabsTrigger>
              <TabsTrigger value="scanner">Scanner</TabsTrigger>
            </TabsList>
            <TabsContent value="products" className="py-8">
              <div className="flex items-center justify-between">
                <h1 className="text-2xl font-bold">Product Inventory</h1>
                <Button size="sm">Add Product</Button>
              </div>
              <div className="mt-6 border shadow-sm rounded-lg">
                <div className="p-4 border-b">
                  <div className="grid md:grid-cols-3 gap-4">
                    <Accordion type="single" collapsible>
                      <AccordionItem value="category">
                        <AccordionTrigger className="text-base">Category</AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {["Lighting", "Electronics", "Home Automation", "Appliances"].map((category) => (
                              <Label key={category} className="flex items-center gap-2 font-normal">
                                <Checkbox
                                  checked={filters.category.includes(category)}
                                  onCheckedChange={() => handleFilterChange("category", category)} />
                                {category}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="origin">
                        <AccordionTrigger className="text-base">Origin</AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {["China", "Japan", "USA", "Germany"].map((origin) => (
                              <Label key={origin} className="flex items-center gap-2 font-normal">
                                <Checkbox
                                  checked={filters.origin.includes(origin)}
                                  onCheckedChange={() => handleFilterChange("origin", origin)} />
                                {origin}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="supplier">
                        <AccordionTrigger className="text-base">Supplier</AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            <Label className="flex items-center gap-2 font-normal">
                              <Checkbox
                                checked={filters.supplier.includes("Acme Inc")}
                                onCheckedChange={() => handleFilterChange("supplier", "Acme Inc")} />
                              Acme Inc
                            </Label>
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                  </div>
                </div>
                <div className="p-4 border-b">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" className="ml-auto">
                        <ListOrderedIcon className="w-4 h-4 mr-2" />
                        Sort by
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="w-[200px]">
                      <DropdownMenuRadioGroup value={sortBy} onValueChange={handleSortChange}>
                        <DropdownMenuRadioItem value="price-asc">Price: Low to High</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="price-desc">Price: High to Low</DropdownMenuRadioItem>
                      </DropdownMenuRadioGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      <TableHead>SKU</TableHead>
                      <TableHead>Price</TableHead>
                      <TableHead>Quantity</TableHead>
                      <TableHead>Barcode</TableHead>
                      <TableHead>Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredProducts.map((product) => (
                      <TableRow key={product.id}>
                        <TableCell className="font-medium">{product.name}</TableCell>
                        <TableCell>{product.sku}</TableCell>
                        <TableCell>${product.price.toFixed(2)}</TableCell>
                        <TableCell>{product.quantity}</TableCell>
                        <TableCell>
                          <img
                            src="/placeholder.svg"
                            width={100}
                            height={50}
                            alt="Barcode"
                            className="w-full object-contain"
                            style={{ aspectRatio: "100/50", objectFit: "cover" }} />
                        </TableCell>
                        <TableCell>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button aria-haspopup="true" size="icon" variant="ghost">
                                <MoveVerticalIcon className="h-4 w-4" />
                                <span className="sr-only">Toggle menu</span>
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem>Edit</DropdownMenuItem>
                              <DropdownMenuItem>Delete</DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </TabsContent>
            <Tabs />
          </Tabs>
        </main>
      </div>
    </div>)
  );
}

function ListOrderedIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="10" x2="21" y1="6" y2="6" />
      <line x1="10" x2="21" y1="12" y2="12" />
      <line x1="10" x2="21" y1="18" y2="18" />
      <path d="M4 6h1v4" />
      <path d="M4 10h2" />
      <path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" />
    </svg>)
  );
}


function MoveVerticalIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polyline points="8 18 12 22 16 18" />
      <polyline points="8 6 12 2 16 6" />
      <line x1="12" x2="12" y1="2" y2="22" />
    </svg>)
  );
}
