/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Vyt6JFKM0KV
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useMemo, useEffect } from "react";
import {
  Tabs,
  TabsList,
  TabsTrigger,
  TabsContent,
} from "../../components/ui/tabs";
import { Button } from "../../components/ui/button";
import {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from "../../components/ui/accordion";
import { Label } from "../../components/ui/label";
import { Checkbox } from "../../components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuItem,
} from "../../components/ui/dropdown-menu";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "../../components/ui/table";
import Menu from "../component/menu";
import BarcodePrinter from "../component/barcode-printer"
import ProductsOnline from "../component/dashboard-product-online"
import Document from "../component/document";
import AddProductDialog from "../../components/component/addProduct"
import formatVND from "../../utils/formatVND";
import SellerAPI from "../../api/seller";
import { useStore } from '../../context/StoreContext';
import Navbar from "../component/navbar"
import Pagination from "../../components/component/pagination"
import Loading from "../../components/component/loading-lottie"
import Animation from "../../utils/lottie-animations/astronot.json"
import { showErrorAlert, showSuccessAlert } from "../../utils/reactSweetAlert"
export default function DashboardProduct() {
  const { storeId } = useStore();

  const [filters, setFilters] = useState({
    category: [],
    origin: [],
    supplier: [],
  });

  const [dialogOpen, setDialogOpen] = useState(false);
  const handleOpenDialog = () => setDialogOpen(true);
  const handleCloseDialog = () => setDialogOpen(false);

  const [sortBy, setSortBy] = useState("price-asc");
  const [productsOffline, setProductsOffline] = useState([]);
  const [productsOnline, setProductsOnline] = useState([]);
  const [inventories, setInventories] = useState([]);
  const [categories, setCategories] = useState([]);
  const [origins, setOrigins] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);



  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 5

  useEffect(() => {
    const fetchProductsOffline = async () => {
      try {
        const response = await SellerAPI.product.getProductsOffline(storeId);
        if (response.statusCode === 200) {
          setProductsOffline(response.data);
        }
      } catch (error) {
        console.error("Error fetching productsOffline:", error);
      } finally {
        setLoading(false);
      }
    };

    const fetchProductsOnline = async () => {
      try {
        const response = await SellerAPI.product.getProductsOnline(storeId);
        console.log('products online: ',response)
        if (response.statusCode === 200) {
          setProductsOnline(response.data);
        }
      } catch (error) {
        console.error("Error fetching productOnline:", error);
      } finally {
        setLoading(false);
      }
    }

    const fetchOrigins = async () => {
      try {
        const response = await SellerAPI.origin.getAllOrigins();
        
        if (response.statusCode === 200) {
          setOrigins(response.data);
        }
      } catch (error) {
        console.error("Failed to fetch origins", error);
      }
    };

    const fetchCategories = async () => {
      try {
        const response = await SellerAPI.category.getAllCategories();
        if (response.statusCode === 200) {
          setCategories(response.data);
        }
      } catch (error) {
        console.error("Failed to fetch categories", error);
      }
    };

    const fetchSuppliers = async () => {
      try {
        const response = await SellerAPI.supplier.getAllSuppliers(storeId);
        if (response.statusCode === 200) {
          setSuppliers(response.data);
        }
      } catch (error) {
        console.error("Failed to fetch suppliers", error);
      }
    };

    const fetchInventories = async () => {
      try {
        const response = await SellerAPI.inventory.getAllInventory(storeId);
        if (response.statusCode === 200) {
          console.log("Inventories: " + JSON.stringify(response.data));
          setInventories(response.data);
        }
      } catch (error) {
        console.error("Failed to fetch inventories", error);
      }
    };

    if (storeId != null) {
      fetchProductsOffline();
      fetchProductsOnline();
      fetchOrigins();
      fetchCategories();
      fetchSuppliers();
      fetchInventories();
    }
  }, [storeId]);

  const filteredProducts = useMemo(() => {
    let result = productsOffline;
    if (filters.category.length > 0) {
      result = result.filter(product => filters.category.includes(product.categoryName));
    }
    if (filters.origin.length > 0) {
      result = result.filter(product => filters.origin.includes(product.originName));
    }
    if (filters.supplier.length > 0) {
      result = result.filter(product => filters.supplier.includes(product.supplierName));
    }
    switch (sortBy) {
      case "price-asc":
        return result.sort((a, b) => a.price - b.price);
      case "price-desc":
        return result.sort((a, b) => b.price - a.price);
      default:
        return result;
    }
  }, [filters, sortBy, productsOffline]);

  // Tính toán số trang
  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);

  // Lấy các sản phẩm trên trang hiện tại
  const currentProducts = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return filteredProducts.slice(startIndex, startIndex + itemsPerPage);
  }, [currentPage, filteredProducts, itemsPerPage]);

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleFilterChange = (type, value) => {
    setFilters(prevFilters => ({
      ...prevFilters,
      [type]: prevFilters[type].includes(value)
        ? prevFilters[type].filter(item => item !== value)
        : [...prevFilters[type], value],
    }));
  };

  const handleSortChange = (value) => {
    setSortBy(value);
  };



  const handleSaveProduct = async (productData) => {
    setLoading(true);
    if(selectedProduct){
      updateProduct(productData);
    }else{
      createProduct(productData);
    }
    
  };

  const createProduct = async (productData) => {
    try {
      const response = await SellerAPI.product.createProductOffline(productData);
      if(response.statusCode === 201) {
        setProductsOffline(prev => [...prev, response.data]);
        showSuccessAlert("Thêm sản phẩm mới","Thêm sản phẩm mới thành công")
      }else{
        showErrorAlert("Thêm sản phẩm mới", "Có lỗi xảy ra khi thêm sản phẩm")
      }
    } catch (error) {
      console.log('create product error: ', error);
      showErrorAlert("Lỗi", "Có lỗi xảy ra khi thêm sản phẩm.");
    }finally{
      setLoading(false);
    }
  }

  const updateProduct = async (productData) => {
    try {
      const response = await SellerAPI.product.updateProductOffline(productData);
      if(response.statusCode === 200) {
        setProductsOffline((prev) => 
            prev.map((product) => 
                product.productId === response.data.productId ? response.data : product
            )
        );

        showSuccessAlert("Cập nhật sản phẩm","Cập nhật sản phẩm thành công")
      }else{
        showErrorAlert("Cập nhật sản phẩm", "Có lỗi xảy ra khi cập nhật sản phẩm")
      }
    } catch (error) {
      console.log('update product error: ', error);
      showErrorAlert("Lỗi", "Có lỗi xảy ra khi cập nhật sản phẩm.");
    }finally{
      setLoading(false);
    }
  }

  const handleDeleteProduct = async (data) => {
    setLoading(true);
    try {
      const response = await SellerAPI.product.deleteProductOffline(data);
      if(response.statusCode === 200) {
        setProductsOffline((prev) =>
            prev.filter((product) => product.productId !== response.data.productId)
        );

        showSuccessAlert("Xóa sản phẩm","Xóa sản phẩm thành công!")
      }else{
        showErrorAlert("Xóa sản phẩm","Có lỗi xảy ra khi xóa sản phẩm!")
      }
    } catch (error) {
      console.log('update product error: ', error);
      showErrorAlert("Xóa sản phẩm","Có lỗi xảy ra khi xóa sản phẩm!");
    }finally{
      setLoading(false);
    }
  }


  if (loading) {
    return <Loading animation={Animation}/>;
  }

  if (error) {
    return <p>{error}</p>;
  }

  return (
    <div className="flex min-h-screen w-full flex-col bg-muted/40">
      <Menu />
      <div className="flex flex-col sm:gap-4 sm:py-4 sm:pl-14">
        <Navbar/>
      </div>
      <div className="flex flex-col sm:gap-4 sm:py-4 sm:pl-14">
        <header className="sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold">Quản lý sản phẩm</h1>
          </div>
        </header>
        <main className="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
          <Tabs defaultValue="productsOffline" className="w-full">
            <TabsList className="flex items-center justify-between border-b">
              <TabsTrigger value="productsOffline">Sản Phẩm Offline</TabsTrigger>
              <TabsTrigger value="productOnline">Sản Phẩm Online</TabsTrigger>
              <TabsTrigger value="printer">In Mã Vạch</TabsTrigger>
              <TabsTrigger value="imports">Nhập Hàng</TabsTrigger>
            </TabsList>
            <TabsContent value="productsOffline" className="py-8">
              <div className="flex items-center justify-between">
                <h1 className="text-2xl font-bold">Kho sản phẩm</h1>
                
                <Button onClick={() => {
                  setDialogOpen(true);
                  setSelectedProduct(null);
                }}>Thêm sản phẩm</Button>
                  <AddProductDialog
                    open={dialogOpen}
                    onClose={handleCloseDialog}
                    onSave={handleSaveProduct}
                    categories={categories}
                    suppliers={suppliers}
                    origins={origins}
                    setCategories={setCategories}
                    setSuppliers={setSuppliers}
                    setOrigins={setOrigins}
                    selectedData={selectedProduct}
                  />
                
              </div>
              <div className="mt-6 border shadow-sm rounded-lg">
                <div className="p-4 border-b">
                  <div className="grid md:grid-cols-3 gap-4">
                    <Accordion type="single" collapsible>
                      <AccordionItem value="category">
                        <AccordionTrigger className="text-base">
                          Loại hàng 
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {categories.map((category) => (
                              <Label
                                key={category.categoryName}
                                className="flex items-center gap-2 font-normal"
                              >
                                <Checkbox
                                  checked={filters.category.includes(category.categoryName)}
                                  onCheckedChange={() =>
                                    handleFilterChange("category", category.categoryName)
                                  }
                                />
                                {category.categoryName}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="origin">
                        <AccordionTrigger className="text-base">
                          Quốc gia
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {origins.map((origin) => (
                              <Label
                                key={origin.originName}
                                className="flex items-center gap-2 font-normal"
                              >
                                <Checkbox
                                  checked={filters.origin.includes(origin.originName)}
                                  onCheckedChange={() =>
                                    handleFilterChange("origin", origin.originName)
                                  }
                                />
                                {origin.originName}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                    <Accordion type="single" collapsible>
                      <AccordionItem value="supplier">
                        <AccordionTrigger className="text-base">
                          Nhà cung cấp
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="grid gap-2">
                            {suppliers.map((supplier) => (
                              <Label
                                key={supplier.supplierName}
                                className="flex items-center gap-2 font-normal"
                              >
                                <Checkbox
                                  checked={filters.supplier.includes(supplier.supplierName)}
                                  onCheckedChange={() =>
                                    handleFilterChange("supplier", supplier.supplierName)
                                  }
                                />
                                {supplier.supplierName}
                              </Label>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                  </div>
                </div>
                <div className="p-4 border-b">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" className="ml-auto">
                        <ListOrderedIcon className="w-4 h-4 mr-2" />
                        Sắp xếp theo
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="w-[200px]">
                      <DropdownMenuRadioGroup
                        value={sortBy}
                        onValueChange={handleSortChange}
                      >
                        <DropdownMenuRadioItem value="price-asc">
                          Giá: Thấp đến Cao
                        </DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value="price-desc">
                          Giá: Cao đến Thấp
                        </DropdownMenuRadioItem>
                      </DropdownMenuRadioGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Tên SP</TableHead>
                      <TableHead>Barcode</TableHead>
                      <TableHead>Giá</TableHead>
                      <TableHead>Tồn kho</TableHead>
                      <TableHead>Loại hàng</TableHead>
                      <TableHead>Nhà cung cấp</TableHead>
                      <TableHead>Quốc gia</TableHead>
                      <TableHead>Hình ảnh</TableHead>
                      <TableHead>Sửa/Xóa</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {currentProducts.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={9}>
                          Không có sản phẩm nào.
                        </TableCell>
                      </TableRow>
                    ) : (
                      currentProducts.map((product) => (
                        <TableRow key={product.id}>
                          <TableCell>{product.productName}</TableCell>
                          <TableCell>{product.barcode}</TableCell>
                          <TableCell>{formatVND(product.price)}</TableCell>
                          <TableCell>
                            {inventories.length !== 0 ? inventories.map((inventory) => inventory.barcode === product.barcode ? inventory.quantityInStock : 0) : 0}
                          </TableCell>
                          <TableCell>{product.categoryName}</TableCell>
                          <TableCell>{product.supplierName}</TableCell>
                          <TableCell>{product.originName}</TableCell>
                          <TableCell>
                          <div className="flex gap-2">
                            <img
                              src={product.images ? product.images[0] : 'https://via.placeholder.com/40'}
                              className="h-10 w-10 rounded-lg"                                 
                             />


                          </div>
                          </TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button 
                              onClick={() => {
                                setDialogOpen(true);
                                setSelectedProduct(product);
                              }}
                              variant="outline">Sửa</Button>
                              <Button 
                              onClick={() => {
                                handleDeleteProduct(product.productId);
                              }}
                              variant="destructive">Xóa</Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))
                    )}
                    <div className="m-3">
                      <Pagination
                        currentPage={currentPage}
                        itemsPerPage={itemsPerPage}
                        totalItems={productsOffline.length}
                        onPageChange={handlePageChange}
                      />
                    </div>
                  </TableBody>
                </Table>
              </div>
            </TabsContent>
            <TabsContent value="productOnline" className="py-8">
              <ProductsOnline productsOnline={productsOnline}/>
            </TabsContent>
            <TabsContent value="printer" className="py-8">
              <BarcodePrinter/>
            </TabsContent>
            <TabsContent value="imports" className="py-8">
              <Document/>
            </TabsContent>
          </Tabs>
        </main>
      </div>
    </div>
  );
}



function ListOrderedIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="10" x2="21" y1="6" y2="6" />
      <line x1="10" x2="21" y1="12" y2="12" />
      <line x1="10" x2="21" y1="18" y2="18" />
      <path d="M4 6h1v4" />
      <path d="M4 10h2" />
      <path d="M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" />
    </svg>)
  );
}


function MoveVerticalIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polyline points="8 18 12 22 16 18" />
      <polyline points="8 6 12 2 16 6" />
      <line x1="12" x2="12" y1="2" y2="22" />
    </svg>)
  );
}



function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}